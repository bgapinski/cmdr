/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c Projector -p projector.h:projector.cpp /home/mwylde/Desktop/projector_interface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef PROJECTOR_H_1253907017
#define PROJECTOR_H_1253907017

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface edu.wesleyan.WesControl.projector
 */
class Projector: public QDBusAbstractInterface
{
    Q_OBJECT
    Q_PROPERTY(QString input READ input WRITE set_input NOTIFY input_changed);
    Q_PROPERTY(bool power READ power WRITE set_power NOTIFY power_changed);
    Q_PROPERTY(bool video_mute READ video_mute WRITE set_video_mute NOTIFY video_mute_changed);
    Q_PROPERTY(bool cooling READ cooling NOTIFY cooling_changed(bool));
    Q_PROPERTY(bool warming READ warming NOTIFY warming_changed(bool));
   // Q_PROPERTY(bool connected READ connected NOTIFY connectedChanged(bool));public:
    static inline const char *staticInterfaceName()
    { return "edu.wesleyan.WesControl.projector"; }

public:
    Projector(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~Projector();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> cooling()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("cooling"), argumentList);
    }

    inline QDBusPendingReply<QString> input()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("input"), argumentList);
    }

    inline QDBusPendingReply<uint> lamp_hours()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("lamp_hours"), argumentList);
    }

    inline QDBusPendingReply<QString> model()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("model"), argumentList);
    }

    inline QDBusPendingReply<uint> percent_lamp_used()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("percent_lamp_used"), argumentList);
    }

    inline QDBusPendingReply<bool> power()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("power"), argumentList);
    }

    inline QDBusPendingReply<QString> set_brightness(uint input)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(input);
        return asyncCallWithArgumentList(QLatin1String("set_brightness"), argumentList);
    }

    inline QDBusPendingReply<QString> set_input(const QString &input)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(input);
        return asyncCallWithArgumentList(QLatin1String("set_input"), argumentList);
    }

    inline QDBusPendingReply<QString> set_power(bool on)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(on);
        return asyncCallWithArgumentList(QLatin1String("set_power"), argumentList);
    }

    inline QDBusPendingReply<QString> set_video_mute(bool on)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(on);
        return asyncCallWithArgumentList(QLatin1String("set_video_mute"), argumentList);
    }

    inline QDBusPendingReply<bool> video_mute()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("video_mute"), argumentList);
    }

    inline QDBusPendingReply<bool> warming()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("warming"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void cooling_changed(bool on);
    void input_changed(const QString &input);
    void power_changed(bool powered);
    void video_mute_changed(bool on);
    void warming_changed(bool on);
};

namespace edu {
  namespace wesleyan {
    namespace WesControl {
      typedef ::Projector projector;
    }
  }
}
#endif
