{"name":"cmdr","tagline":"An A/V control system built on Ruby with an HTML5 frontend","body":"#cmdr\r\nThis repository holds the code for the cmdr daemon that runs on controllers \r\nand interacts with devices. More information can be found in the wiki \r\n(like [how to write devices](https://github.com/wesleyan/cmdr/wiki/Device), \r\n[how to set up Ubuntu](https://github.com/wesleyan/cmdr/wiki/Installing-and-customizing-Ubuntu), \r\nand various planning docs) and in the documentation, which can be generated by \r\nrunning `rake docs` inside the cmdr directory.\r\n\r\ncmdr is split into three parts: \r\nthis daemon, [cmdr-server](https://github.com/wesleyan/cmdr-server) which \r\nholds both the backend and frontend code run on the central server as well \r\nas the touchscreen interface, and \r\n[cmdr-devices](https://github.com/wesleyan/cmdr-devices) which holds the \r\nvarious device drivers that have been written.\r\n\r\n**Note: We use subtrees for the devices. More information can be found\r\n[here](http://blogs.atlassian.com/2013/05/alternatives-to-git-submodule-git-subtree/)**\r\n\r\n##Development notes\r\n###Code style\r\nAll code should match the following style: spaces for indentation and \r\naligning and line lengths should be minimized but there is no hard cut-off. \r\nFor Ruby code, class names ShouldBeCamelCased, variable and method names \r\nshould\\_be\\_underscored, every method and class should be documented \r\nusing [Yardoc](yardoc.com) tags and \r\n[markdown](http://daringfireball.net/projects/markdown/) formatting \r\nand [RSpec](rpsec.org) tests should be written for all functionality.\r\n\r\nFor Javascript, the same formatting rules should apply, but variable \r\nand method names shouldBeCamelCased as well as class names. Methods \r\nand classes should be documented using \r\n[JSDoc](http://code.google.com/p/jsdoc-toolkit/). Also, all code \r\nshould be run through [JSLint](http://www.jslint.com/) and any errors \r\nit identifies should be corrected (this means no global variables \r\nand semi-colons are mandatory).\r\n\r\nIn general, try to maintain the style already found in the code.\r\n\r\n###Git usage\r\nWe are using [Git Flow](http://nvie.com/git-model) as described in that blog post. \r\nThere is also [a tool](http://github.com/nvie/gitflow) that makes it easier \r\nto follow. The basic idea is that the master branch should only be used \r\nfor tested and vetted releases. The normal development integration branch \r\nis develop, while features are staged in their own branches, which are named \r\nfeatures/xxx. When a feature is finished, it is merged back into develop. \r\nWhen a number of features have been finished and it becomes prudent to release, \r\nyou create a release branch from develop. The release branch is then heavily \r\ntested and any issues found are fixed. When considered production-ready, \r\nthe release branch is merged into master, which is then tagged with the \r\nversion number. This way, master is always stable and ready to be deployed, \r\nwhile you can have more freedom to break things in your feature branch and in develop.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}