#!/usr/bin/env ruby
require 'rubygems'
require 'dbus'
#require '/usr/local/wescontrol/daemon/dbus_fix.rb'
require 'yaml'
require 'drb/drb'

require '/usr/local/wescontrol/daemon/devices/device'
require '/usr/local/wescontrol/daemon/devices/Projector'
require '/usr/local/wescontrol/daemon/devices/VideoSwitcher'

URI = "druby://localhost:8787"

couch = CouchRest.new("localhost:5984")

class RControl < DBus::Object
	@room_name
	def initialize(room_name)
		@room_name = room_name
		super("/edu/wesleyan/WesControl/controller")
	end
	
	dbus_interface "edu.wesleyan.WesControl.controller" do
		dbus_method :room_name, "out name:s" do
			[@room_name]
		end
	end
end



doc_id = `ifconfig | grep HWaddr`.split("\n")[0].match(/([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])/).to_s.downcase.gsub(":", "-")

@config = nil
begin
	db = couch.database('rooms')
	@config = db.get(doc_id)
	#TODO: actually check whether the config file is valid
rescue
	raise "The room has not been added the database"
end

@devices = {}

bus          = DBus::SystemBus.instance
service      = bus.request_service("edu.wesleyan.WesControl")
rcontrol     = RControl.new(config['room_name'])
service.export(rcontrol)

@config['devices'].each{|device|
	require "/usr/local/wescontrol/daemon/devices/#{device['class']}"
	device = Object.const_get(device['class']).new(device['name'], bus, device)
	unless device['fields']
		
	@devices[device.name] = device
	service.export(device)
}

FRONT_OBJECT = @devices
$SAFE = 1 # disable eval() and friends
DRb.start_service(URI, FRONT_OBJECT)

while(true) do
	#begin
		main = DBus::Main.new
		main << bus
		main.run
	#rescue
	#	puts "Error: #{$!}"
	#end
end
